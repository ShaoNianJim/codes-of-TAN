import pandas as pd
import networkx as nx
import matplotlib.pyplot as plt
import Utils.util as util
from pgmpy.models import BayesianModel

"""
According to the topology generated by code1, the root node of TAN is selected under the guidance of experts.
"""
# Read data for modeling
train_data = pd.read_excel("filepath/well_data.xlsx")
# Building TAN model under the guidance of experts
Tan = BayesianModel()

Tan.add_edge("label","CRT")
Tan.add_edge("label","ST")
Tan.add_edge("label","FST")
Tan.add_edge("label","RTH")
Tan.add_edge("label","PS")
Tan.add_edge("label","HG")
Tan.add_edge("label","FP")

Tan.add_edge("ST","HG")
Tan.add_edge("HG","CRT")
Tan.add_edge("HG","FST")
Tan.add_edge("HG","PS")
Tan.add_edge("CRT","RTH")
Tan.add_edge("CRT","FP")
# fit
Tan.fit(train_data)

"""
visual TAN structure
"""
graph = Tan
nodelist = graph.nodes
pos = nx.layout.shell_layout(graph)
pos = {'label': (-500, 1500), 'HG': (-100, 200), 'CRT': (400, 100),
       'ST': (1800, 250), 'FST': (-1400, 400),  'PS': (2500, 400),
       'RTH': (1000, 200), 'FP': (2000, 200)}
node_sizes = [1000 + 10 * i for i in range(len(graph))]
M = graph.number_of_edges()
edge_alphas = [(5 + i) / (M + 4) for i in range(M)]
nodes = nx.draw_networkx_nodes(graph, pos, nodelist=nodelist, node_size=node_sizes, node_color="red", label='true')
edges = nx.draw_networkx_edges(graph, pos, node_size=node_sizes, arrowstyle='->',
                               arrowsize=15, edge_color="blue",
                               edge_cmap=plt.cm.Blues, width=2)
labels = nx.draw_networkx_labels(graph, pos)
ax = plt.gca()
ax.set_axis_off()
plt.show()


"""
The data of 222 exploration wells are predicted by TAN, and the results are compared with the actual results.
"""

# actual_value indicates the results of  exploration wells.
actual_value = train_data["label"].values.tolist()
# TAN predicts the  results of  exploration wells
predict_data = train_data
predict_data.drop('label', axis=1, inplace=True)
Tan_pred_value = Tan.predict(predict_data)

score = util.get_predict(predict_data=Tan_pred_value, label=actual_value)
for i in score:
    print("class lable:", i)
    print("[accuracy rate ,Predict the correct number,Total number]")
    print(score[i])
